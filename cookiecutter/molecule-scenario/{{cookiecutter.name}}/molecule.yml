---
{#-
Parse the 'groups' string into a list of lists.
Example:
  Given:
    cookiecutter.number_instance = "2"
    cookiecutter.groups = "foo:1,2+bar:1+baz"
  Then:
    group_names: [['foo', 'bar', 'baz'], ['foo', 'baz']]
-#}
{%- set terms = [] %}
{%- set groups = {} %}
{%- set group_names = [] %}
{#- Default groups string for roles. -#}
{%- if cookiecutter.groups == '' %}
  {%- if cookiecutter.with_krbserver == 'yes' %}
    {%- set terms = ['afs_kdcs', 'primary_kdc:1'] %}
  {%- endif %}
  {%- if cookiecutter.with_server == 'yes' %}
    {%- set terms = terms + ['afs_servers', 'afs_databases', 'afs_fileservers'] %}
  {%- endif %}
  {%- if cookiecutter.with_client == 'yes' %}
    {%- set terms = terms + ['afs_clients'] %}
  {%- endif %}
{#- Parse groups string -#}
{%- elif not '+' in cookiecutter.groups %}
    {%- set terms = [cookiecutter.groups] %}
{%- else %}
    {%- set terms = cookiecutter.groups.split('+') %}
{%- endif %}
{%- for term in terms %}
  {%- if ':' in term %}
    {%- set group, host_numbers = term.split(':') %}
  {%- else %}
    {%- set group, host_numbers = [term, ''] %}
  {%- endif %}
  {%- if host_numbers == '' %}
    {%- set host_numbers = range(1, (cookiecutter.number_instances|int)+1) | list %}
  {%- else %}
    {%- set host_numbers = host_numbers.split(',') | map('int') | list %}
  {%- endif %}
  {%- set groups = groups.update({group: host_numbers}) %}
{%- endfor %}
{#- Generate a list of lists for the platforms section. -#}
{%- for i in range(1, (cookiecutter.number_instances|int)+1) %}
  {%- set names = [] %}
  {%- for g in groups %}
    {%- if i in groups[g] %}
      {%- set names = names.append(g) %}
    {%- endif %}
  {%- endfor %}
  {%- set group_names = group_names.append(names) %}
{%- endfor %}
dependency:
  name: galaxy
driver:
  name: {{ cookiecutter.driver }}
{%- if cookiecutter.driver_provider %}
  provider:
    name: {{ cookiecutter.driver_provider }}
{%- endif %}
{%- if cookiecutter.driver == 'delegated' %}
  {%- if cookiecutter.driver_provider == 'libvirt' %}
  options:
    host: {{ cookiecutter.driver_libvirt_host }}
  {%- if cookiecutter.driver_libvirt_host == 'localhost' %}
    connection: local
  {%- else %}
    port: {{ cookiecutter.driver_libvirt_port }}
    connection: ssh
  {%- endif %}
    libvirt_uri: {{ cookiecutter.driver_libvirt_uri }}
    logfile: {{ cookiecutter.driver_libvirt_logfile }}
    loglevel: {{ cookiecutter.driver_libvirt_loglevel }}
    python_interpreter: {{ cookiecutter.driver_libvirt_python_interpreter }}
  {%- endif %}
{%- endif %}
platforms:
{%- for i in range(cookiecutter.number_instances | int) %}
  - name: {{ cookiecutter.instance_name }}-{{ '%02d' % (i+1) }}
  {%- if cookiecutter.driver == 'vagrant' %}
    box: generic/{{ cookiecutter.os }}
  {%- elif cookiecutter.driver == 'delegated' %}
    {%- if cookiecutter.os == 'centos7' %}
    template: generic-centos-7
    {%- elif cookiecutter.os == 'centos8' %}
    template: generic-centos-8
    {%- elif cookiecutter.os == 'debian9' %}
    template: generic-debian-9
    {%- elif cookiecutter.os == 'debian10' %}
    template: generic-debian-10
    {%- endif %}
  {%- endif %}
    memory: {{ cookiecutter.instance_mem }}
    cpus: {{ cookiecutter.instance_cpus }}
  {%- if group_names[i] %}
    groups:
    {%- for group_name in group_names[i] %}
      - {{ group_name }}
    {%- endfor %}
  {%- endif %}
{%- endfor %}
provisioner:
  name: ansible
{%- if cookiecutter.driver == 'delegated' and cookiecutter.driver_provider == 'libvirt' %}
  {%- if cookiecutter.driver_libvirt_prepare != '' %}
  playbooks:
    prepare: {{ cookiecutter.driver_libvirt_prepare }}
  {%- endif %}
{%- endif %}
  inventory:
    group_vars:
      all:
        afs_cell: example.com
        afs_local_dir: "${MOLECULE_EPHEMERAL_DIRECTORY}"
      {%- if cookiecutter.with_server == 'yes' %}
        afs_csdb_file: "${MOLECULE_EPHEMERAL_DIRECTORY}/csdb.yaml"
      {%- endif %}
      {%- if cookiecutter.im != 'default' %}
        afs_install_method: {{ cookiecutter.im }}
      {%- endif %}
      {%- if cookiecutter.with_client == 'yes'
             and cookiecutter.im in ('default', 'managed', 'packages') %}
        afs_module_install_method: {{ cookiecutter.im_module }}
      {%- endif %}
      {%- if cookiecutter.im == 'bdist' or cookiecutter.build == 'bdist' %}
        {%- if cookiecutter.bdist_flavor == 'modern' %}
        afs_bdist_dir: "~/.cache/ansible-openafs/binaries/bdist"
        {%- elif cookiecutter.bdist_flavor == 'transarc' %}
        afs_bdist_dir: "~/.cache/ansible-openafs/binaries/transarc"
        {%- endif %}
      {%- elif cookiecutter.im == 'packages' or cookiecutter.build == 'rpms' %}
        afs_rpm_dir: "~/.cache/ansible-openafs/binaries/rpms"
      {%- endif %}
      {%- if cookiecutter.with_krbserver == 'no' %}
        {%- if cookiecutter.with_server == 'yes' %}
        afs_service_keytab: "{{ cookiecutter.service_keytab }}"
        {%- endif %}
      {%- elif cookiecutter.with_krbserver == 'yes' %}
        afs_service_keytab: "${MOLECULE_EPHEMERAL_DIRECTORY}/rxkad.keytab"
      {%- endif %}
verifier:
  name: ansible
scenario:
  create_sequence:
  {%- if cookiecutter.check_dependency == 'yes' %}
    - dependency
  {%- endif %}
    - create
    - prepare
  check_sequence:
  {%- if cookiecutter.check_dependency == 'yes' %}
    - dependency
  {%- endif %}
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - check
    - destroy
  converge_sequence:
  {%- if cookiecutter.check_dependency == 'yes' %}
    - dependency
  {%- endif %}
    - create
    - prepare
    - converge
  destroy_sequence:
  {%- if cookiecutter.check_dependency == 'yes' %}
    - dependency
  {%- endif %}
    - cleanup
    - destroy
  test_sequence:
  {%- if cookiecutter.check_dependency == 'yes' %}
    - dependency
  {%- endif %}
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - verify
  {%- if cookiecutter.check_idempotence == 'yes' %}
    - idempotence
  {%- endif %}
  {%- if cookiecutter.check_side_effect == 'yes' %}
    - side_effect
  {%- endif %}
    - cleanup
    - destroy

---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_os_family }}.yaml"
    - "{{ role_path }}/vars/defaults.yaml"

- include_tasks: "system-{{ afs_firewall }}.yaml"
  when: afs_firewall is defined

- name: Install packages
  include_tasks: "{{ item }}"
  with_first_found:
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}.yaml"
    - "install-packages/{{ ansible_os_family }}.yaml"
    - "unknown.yaml"

- name: Set default realm
  become: yes
  template:
    src: krb5.conf.j2
    dest: "{{ afs_krbserver_krb5_conf }}"
    owner: root
    group: root
    mode: 0644

- name: Configure kerberos key server
  become: yes
  template:
    src: kdc.conf.j2
    dest: "{{ afs_krbserver_kdc_conf }}"
    owner: root
    group: root
    mode: 0600
  notify:
    - Restart kerberos key server

- name: Configure kerberos admin server
  become: yes
  template:
    src: kadm5.acl.j2
    dest: "{{ afs_krbserver_kadm5_acl }}"
    owner: root
    group: root
    mode: 0600
  notify:
    - Restart kerberos admin server

- name: Create kerberos kdc database
  become: yes
  command: >
    {{ afs_kdb5_util }}
    -P {{ afs_kerberos_master_password }}
    -r {{ afs_realm }}
    create -s
  args:
    creates: "{{ afs_krbserver_principal }}"
  register: krb5_util_results

- name: Create admin principal
  become: yes
  no_log: yes
  openafs_principal:
    state: present
    principal: "{{ afs_admin_principal }}"
    password: "{{ afs_admin_password }}"

- name: Start kerberos key server
  become: yes
  service:
    name: "{{ afs_krbserver_kdc_service }}"
    enabled: yes
    state: started
  register: afs_krbserver_kdc_service_result

- name: Start kerberos admin server
  become: yes
  service:
    name: "{{ afs_krbserver_admin_service }}"
    enabled: yes
    state: started
  register: afs_krbserver_admin_service_result

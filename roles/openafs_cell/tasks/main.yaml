---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_os_family }}.yaml"
    - "{{ role_path }}/vars/defaults.yaml"

- name: Admin login
  command: >
    {{ afs_klog_krb5 }}
    -principal {{ afs_admin_principal }}
    -password {{ afs_admin_password }}
    -cell {{ afs_cell }}
    -k {{ afs_realm }}
  changed_when: false

- name: Mount root volumes
  include: root-{{ ('-dynroot' in afs_afsd_opts) | ternary('dynamic','static') }}.yaml

- name: Create principals
  command: >
    {{ afs_kadmin }}
    -w {{ afs_admin_password }}
    -p {{ afs_admin_principal }}@{{ afs_realm }}
    -q "add_principal -pw {{ afs_user_password }} {{ item.name|replace('.','/') }}@{{ afs_realm }}"
  with_items: "{{ afs_users }}"

- name: Create users
  command: "{{ afs_pts }} createuser -name {{ item.name|replace('/','.') }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for name already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_users }}"

- name: Create groups
  command: "{{ afs_pts }} creategroup -name {{ item.name }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for name already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_groups }}"

- name: Set group members
  command: "{{ afs_pts }} adduser -group {{ item.name }} -user {{ item.members|join(' ') }}"
  register: pts_result
  changed_when: pts_result.rc == 0
  failed_when: >
    pts_result.rc != 0
    and 'Entry for id already exists' not in pts_result.get('stderr','')
  with_items: "{{ afs_groups }}"

- name: Create volumes
  command: >
    {{ afs_vos }} create
    -server {{ item.get('host', afs_root_server) }}
    -partition {{ item.get('part', afs_root_part) }}
    -name {{ item.name }}
    -maxquota {{ item.get('quota', 0) }}
  register: vos_result
  changed_when: vos_result.rc == 0
  failed_when: >
    vos_result.rc != 0
    and 'already exists' not in vos_result.get('stderr','')
  with_items: "{{ afs_volumes }}"

- name: Mount volumes
  command: >
    {{ afs_fs }} mkmount
    -dir {{ afs_mountpoint }}/.{{ afs_cell }}/{{ item.get('mtpt', item.name) }}
    -vol {{ item.name }}
    -cell {{ afs_cell }}
  register: fs_result
  changed_when: fs_result.rc == 0
  failed_when: >
    fs_result.rc != 0
    and 'File exists' not in fs_result.get('stderr','')
  with_items: "{{ afs_volumes }}"

- name: Release volumes
  command: "{{ afs_vos }} release root.cell -verbose"
  changed_when: False

- name: Flush the volume cache
  command: "{{ afs_fs }} checkvolumes"
  changed_when: False

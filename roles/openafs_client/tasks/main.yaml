---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_os_family }}.yaml"
    - "{{ role_path }}/vars/defaults.yaml"

- import_tasks: "pre-install/check-variables.yaml"
- include_tasks: "pre-install/firewall-{{ afs_firewall | default('none') }}.yaml"

- name: Install client
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/tasks/install/{{ afs_install_method }}-{{ _afs_client_install_platform }}-{{ afs_module_install_method }}.yaml"
    - "{{ role_path }}/tasks/install/{{ afs_install_method }}-{{ _afs_client_install_platform }}.yaml"
    - "{{ role_path }}/tasks/install/{{ afs_install_method }}.yaml"
    - "{{ role_path }}/tasks/install/unknown.yaml"

- import_tasks: "post-install/directories.yaml"
- import_tasks: "post-install/configure.yaml"

- name: Start OpenAFS client
  become: yes
  service:
    state: started
    enabled: yes
    name: "{{ afs_client_service_name }}"
  register: afs_client_service_result

- name: "Get mount information"
  command:
    cmd: mount
    warn: false
  check_mode: no
  changed_when: false
  register: mount_results

- name: "Print mount information"
  debug:
    var: mount_results
    verbosity: 1

- name: "Verify afs filesystem is mounted"
  assert:
    that:
      mount_results.stdout is regex('AFS on /\w+ type afs')

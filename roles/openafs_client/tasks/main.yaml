---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_os_family }}.yaml"
    - "{{ role_path }}/vars/defaults.yaml"

- include_tasks: "system-{{ afs_firewall }}.yaml"
  when: afs_firewall is defined

- name: Create /afs
  become: yes
  file:
    state: directory
    path: "{{ afs_mountpoint }}"
    mode: 0755
    owner: root
    group: root

- name: Create cache directory
  become: yes
  file:
    state: directory
    path: "{{ afs_afscachedir }}"
    mode: 0700
    owner: root
    group: root

- name: Create configuration directory
  become: yes
  file:
    state: directory
    path: "{{ afs_viceetcdir }}"
    mode: 0755
    owner: root
    group: root

- name: Install packages
  include_tasks: "{{ item }}"
  with_first_found:
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}.yaml"
    - "install-packages/{{ ansible_os_family }}.yaml"
    - "install-packages/unknown.yaml"

- name: Ensure public cell configuration file exists (CellServDB.dist)
  become: yes
  copy:
    content: ""
    dest: "{{ afs_viceetcdir }}/CellServDB.dist"
    mode: 0644
    force: no

- name: Check CellServDB file
  delegate_to: localhost
  stat:
    path: "{{ afs_local_dir }}/CellServDB"
  register: cellservdb_st

- name: Update local cell configuration file (CellServDB.local)
  become: yes
  copy:
    src: "{{ afs_local_dir }}/CellServDB"
    dest: "{{ afs_viceetcdir }}/CellServDB.local"
    mode: 0644
    owner: root
    group: root
  when: cellservdb_st.stat.exists is defined and cellservdb_st.stat.exists

- name: Ensure local cell configuration file exists (CellServDB.local)
  become: yes
  copy:
    content: ">{{ afs_cell }}  #Cell name\n"
    dest: "{{ afs_viceetcdir }}/CellServDB.local"
    mode: 0644
    owner: root
    group: root
    force: no

- name: Combine local and public cell database (CellServDB.ansible)
  become: yes
  shell: cat CellServDB.local CellServDB.dist > CellServDB.ansible
  args:
    chdir: "{{ afs_viceetcdir }}"
  changed_when: false

- name: Update CellServDB
  become: yes
  copy:
    remote_src: true
    src: "{{ afs_viceetcdir }}/CellServDB.ansible"
    dest: "{{ afs_viceetcdir }}/CellServDB"
    mode: 0644
    owner: root
    group: root
  notify:
    - Restart OpenAFS client

- name: Set local cell name
  become: yes
  copy:
    content: "{{ afs_cell }}"
    dest: "{{ afs_viceetcdir }}/ThisCell"
    mode: 0644
    owner: root
    group: root
  notify:
    - Restart OpenAFS client

- name: Update cache configuration
  become: yes
  template:
    src: cacheinfo.j2
    dest: "{{ afs_viceetcdir }}/cacheinfo"
    mode: 0644
    owner: root
    group: root
  notify:
    - Restart OpenAFS client

- name: Start OpenAFS client
  become: yes
  service:
    state: started
    enabled: yes
    name: "{{ afs_client_service }}"
  register: afs_client_service_result

- name: "Get mount information"
  command:
    cmd: mount
    warn: false
  check_mode: no
  changed_when: false
  register: mount_results

- name: "Print mount information"
  debug:
    var: mount_results
    verbosity: 1

- name: "Verify afs filesystem is mounted"
  assert:
    that:
      mount_results.stdout is regex('AFS on /\w+ type afs')

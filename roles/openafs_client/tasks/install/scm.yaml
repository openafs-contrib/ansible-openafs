---
- name: Verify service manager type is supported
  assert:
    that: ansible_service_mgr in ["systemd"]

- name: Verify selinux is disabled
  assert:
    that: ansible_selinux.mode != 'enforcing'
  when:
    - ansible_selinux is defined
    - ansible_selinux | type_debug == 'dict'
    - ansible_selinux.status == 'enabled'

- import_role:
    name: openafs_devel

- name: Build userspace binaries
  when: >
    ansible_local.openafs.server_installed is undefined
    or ansible_local.openafs.server_installed == 'no'
  block:
    - name: Checkout source code
      git:
        repo: "{{ afs_scm_gitrepo }}"
        version: "{{ afs_scm_gitref }}"
        dest: ~/openafs
      register: checkout_results

    - name: Build OpenAFS binaries
      openafs_build:
        state: built
        target: install_nolibafs
        clean: "{{ checkout_results.changed }}"
        projectdir: ~/openafs
        destdir: ~/openafs/packaging/dest
        configure_options:
          enable:
            - debug
          disable:
            - kernel-module
      register: build_results

    - name: Build results
      debug:
        var: build_results

    - name: Install binaries
      become: yes
      openafs_install_bdist:
        path: "{{ build_results.destdir }}"
        log_level: debug
      register: install_results

    - name: Store installation facts
      become: yes
      openafs_store_facts:
        state: update
        facts:
          install_method: "{{ afs_install_method }}"
          bins: "{{ install_results.bins }}"
          dirs: "{{ install_results.dirs }}"

- name: Checkout source code
  git:
    repo: "{{ afs_scm_gitrepo }}"
    version: "{{ afs_scm_gitref }}"
    dest: ~/openafs-module
  register: checkout_module_results

- name: Build OpenAFS module
  openafs_build:
    state: built-module
    target: install_only_libafs
    clean: "{{ checkout_module_results.changed }}"
    projectdir: ~/openafs-module
    destdir: ~/openafs/packaging/dest
    configure_options:
      enable:
        - debug
        - debug-kernel
        - kenel-module
      with:
        - linux-kernel-packaging
  register: build_module_results

- name: Build module results
  debug:
    var: build_module_results

- name: Install module binaries
  become: yes
  openafs_install_bdist:
    path: "{{ build_module_results.destdir }}"
    log_level: debug
  register: install_module_results

- name: Store installation facts
  become: yes
  openafs_store_facts:
    state: update
    facts:
      install_method: "{{ afs_install_method }}"
      client_installed: yes
      client_service_name: openafs-client
      bins: "{{ install_module_results.bins }}"
      dirs: "{{ install_module_results.dirs }}"

- name: Setup systemd service
  become: yes
  block:
    - name: Install systemd unit file
      template:
        src: openafs-client.service.j2
        dest: "/etc/systemd/system/{{ afs_client_service_name }}.service"
      register: unit_file

    - name: Reload systemd
      systemd:
        daemon_reload: yes
      when: unit_file.changed

---
#
# Install prebuilt rpm packages. This packages must be available on
# the control node and will be uploaded to the remote node and installed.
#
# The directory on the control node must contain packages for only one
# OpenAFS version, but may contain multiple kmod-openafs rpms for multiple
# linux kernel versions for the given OpenAFS version.
#
# We search the rpm files for a kmod-openafs which matches the current
# kernel version by querying the "provides" information in the rpm package
# files.
#
# A matching kmod-openafs-debuginfo is also installed if one is provided
# in the set of rpm files.
#

- import_role:
    name: openafs_common
    tasks_from: upload_rpms

# Find the userspace rpm filenames for the client. We assume
# all of the rpms in the staging directory belong to the same
# version of OpenAFS.
- name: Find client userspace rpm filenames
  find:
    path: "{{ afs_tmpdir }}/rpms/"
    use_regex: yes
    patterns:
      - "openafs-[0-9].*[.]rpm$"
      - "openafs-client-.*[.]rpm$"
      - "openafs-debuginfo-.*[.]rpm$"
      - "openafs-docs-.*[.]rpm$"
      - "openafs-krb5-.*[.]rpm$"
  register: find_rpms

- set_fact:
    userspace_rpms: "{{ find_rpms.files | map(attribute='path') | list }}"

- name: Verify the rpm package files are present
  assert:
    that:
      - userspace_rpms | select('search', '/openafs-[0-9]') | list | count == 1
      - userspace_rpms | select('search', '/openafs-client-[0-9]') | list | count == 1

# Find a kmod-openafs rpm for the current kernel version by checking the
# 'provides' values in the kmod-openafs rpms. The kmod-openafs rpm file is
# required. Search for a matching kmod-openafs-debuginfo file. The
# kmod-openafs-debuginfo file will also be installed if present.
- name: Find kmod rpm filenames
  find:
    path: "{{ afs_tmpdir }}/rpms/"
    patterns: "kmod-openafs-*.rpm"
  register: find_kmods

- name: Query rpm provides information
  command:
    cmd: rpm -q --provides -p "{{ kmod }}"
    warn: false
  changed_when: false
  register: rpm_query
  with_items: "{{ find_kmods.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: kmod

# Search for kmod packages which provide the current kernel version.
- set_fact:
    kmods: "{{ rpm_query.results
          | selectattr('stdout', 'search', 'kernel-modules = ' + ansible_kernel)
          | map(attribute='kmod')
          | list }}"

- name: Verify kmod-openafs rpm file was found
  fail:
    msg: "kmod-openafs not found for kernel version {{ ansible_kernel }}."
  when: kmods | count == 0

# Search for a matching debuginfo rpm for the kmod.
- set_fact:
    kmods_debug: "{{ find_kmods.files
      | selectattr('path', 'search', kmods[0] | replace('kmod-openafs-','kmod-openafs-debuginfo-'))
      | map(attribute='path')
      | list }}"

- set_fact:
    rpms: "{{ userspace_rpms + kmods + kmods_debug }}"

- debug:
    var: rpms

- name: Install OpenAFS client rpm files
  become: yes
  yum:
    state: present
    disable_gpg_check: yes
    name: "{{ rpms }}"

- name: Get installation paths
  openafs_get_install_paths:
    package_manager_type: rpm
  register: install_results

- name: Store installation facts
  become: yes
  openafs_store_facts:
    state: update
    facts:
      install_method: "{{ afs_install_method }}"
      client_installed: yes
      client_service_name: openafs-client
      bins: "{{ install_results.bins }}"
      dirs: "{{ install_results.dirs }}"

- name: Cleanup uploaded rpm files
  file:
    state: absent
    path: "{{ afs_tmpdir }}/rpms/{{ rpm }}"
  changed_when: false
  with_items: "{{ uploaded_rpms }}"
  when: uploaded_rpms is defined
  loop_control:
    loop_var: rpm

- import_tasks: "{{ role_path }}/tasks/common/Linux-load-module.yaml"

- name: Set client startup options
  become: yes
  lineinfile:
    path: /etc/sysconfig/openafs
    regexp: "^AFSD_ARGS="
    line: 'AFSD_ARGS="{{ afs_afsd_opts }}"'
    state: present
  notify:
    - Restart OpenAFS client

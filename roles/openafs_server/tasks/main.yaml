---
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_distribution }}.yaml"
    - "{{ role_path }}/vars/{{ ansible_os_family }}.yaml"
    - "{{ role_path }}/vars/defaults.yaml"

- name: Make local directory
  run_once: true
  delegate_to: localhost
  file:
    path: "{{ afs_local_dir }}"
    state: directory
    mode: 0755

- name: Generate cell configuration files
  run_once: true
  delegate_to: localhost
  template:
    src: "{{ item }}.j2"
    dest: "{{ afs_local_dir }}/{{ item }}"
  with_items:
    - CellServDB
    - ThisCell
    - UserList

- name: Create the Kerberos service key
  become: yes
  command: >
    {{ afs_kadmin }}
    -w {{ afs_admin_password }}
    -p {{ afs_admin_principal }}@{{ afs_realm }}
    -r "{{ afs_realm }}"
    -q "add_principal -randkey afs/{{ afs_cell }}@{{ afs_realm }}"
  register: kadmin_results
  changed_when: >
    kadmin_results.rc == 0
    and not "already exists while creating" in kadmin_results.stderr
  when: inventory_hostname == ansible_play_hosts[0]

# Debian based systems add a loopback address for the hostname as
# a fallback when dns is unavailable. These can cause issues when
# trying to update the vldb.
- name: Avoid resolving the hostname to a loopback address
  become: yes
  replace:
    path: /etc/hosts
    backup: yes
    regexp: '^127.0.1.1\b(.*)\b{{ ansible_host | replace(".", "\.") }}\b'
    replace: '{{ ansible_default_ipv4.address }} \1 {{ ansible_host }}'

- include_tasks: "system-{{ afs_firewall }}.yaml"
  when: afs_firewall is defined

- name: SELinux
  when:
    - ansible_selinux is defined
    - ansible_selinux.get('status') == 'enabled'
  block:
    - debug:
        var: afs_selinux_mode
        verbosity: 1

    - name: Verify selinux mode value
      assert:
        that: afs_selinux_mode in ['disabled', 'enforcing', 'permissive']

    - name: Setup SELinux mode
      become: yes
      selinux:
        state: "{{ afs_selinux_mode }}"
        policy: targeted

    - name: Setup SELinux policies
      include_tasks: selinux-policies.yaml
      when: afs_selinux_mode == 'enforcing'

- import_tasks: server-partitions.yaml

- name: Install packages
  include_tasks: "{{ item }}"
  with_first_found:
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yaml"
    - "install-packages/{{ ansible_distribution }}.yaml"
    - "install-packages/{{ ansible_os_family }}.yaml"
    - "unknown.yaml"
  when: afs_server_install_method == 'package-manager'

- name: Install
  include_tasks: "install-{{ afs_server_install_method }}.yaml"
  when: afs_server_install_method != 'package-manager'

- import_tasks: server-config.yaml

- import_tasks: server-key.yaml

- include_tasks: selinux-contexts.yaml
  when:
    - ansible_selinux is defined
    - ansible_selinux.get('status') == 'enabled'
    - afs_selinux_mode != 'disabled'

- name: Start the OpenAFS servers
  become: yes
  service:
    name: "{{ afs_server_service }}"
    state: started
    enabled: yes
  register: afs_server_service_result

- include_tasks: cell-bootstrap.yaml
  when: inventory_hostname == ansible_play_hosts[0]

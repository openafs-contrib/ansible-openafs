---
- name: Create the Kerberos service key
  become: yes
  run_once: yes
  command: >
    {{ afs_kadmin }}
    -w {{ afs_admin_password }}
    -p {{ afs_admin_principal }}@{{ afs_realm }}
    -r "{{ afs_realm }}"
    -q "add_principal -randkey afs/{{ afs_cell }}@{{ afs_realm }}"
  register: kadmin_results
  changed_when: >
    kadmin_results.rc == 0
    and not "already exists while creating" in kadmin_results.stderr

# Set the AFS service key. As of OpenAFS 1.8.0, the akeyconvert tool was
# provided to import the keys into the OpenAFS keyfile formats. Versions 1.6.5
# to 1.6.x use the rxkad.keytab directly.  Versions before 1.6.5 are not
# supported here.  We also assume the kadmin tool is new enough to support the
# -norandkey option to distribute the keys.

- name: Write the service key to a keytab file
  become: yes
  command: >
    {{ afs_kadmin }}
    -r "{{ afs_realm }}"
    -p "{{ afs_admin_principal }}"
    -w "{{ afs_admin_password }}"
    -q 'ktadd -norandkey -k {{ afs_afsconfdir }}/rxkad.keytab.ansible afs/{{ afs_cell }}@{{ afs_realm }}'
  args:
    creates: "{{ afs_afsconfdir }}/rxkad.keytab.ansible"

- name: Check for key value changes
  become: yes
  copy:
    src: "{{ afs_afsconfdir }}/rxkad.keytab.ansible"
    dest: "{{ afs_afsconfdir }}/rxkad.keytab"
    remote_src: yes
  register: keytab
  notify:
    - Restart OpenAFS servers

- name: Check for akeyconvert availability
  stat:
    path: "{{ afs_akeyconvert }}"
  register: akeyconvert
  changed_when: False

- name: Set the service key
  become: yes
  command: "{{ afs_akeyconvert }}"
  register: akeyconvert_results
  when: keytab.changed and akeyconvert.stat.exists
